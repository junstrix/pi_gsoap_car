/* soappiProxy.cpp
   Generated by gSOAP 2.8.15 from pi_control.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soappiProxy.h"

piProxy::piProxy()
{	piProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

piProxy::piProxy(const struct soap &_soap) : soap(_soap)
{ }

piProxy::piProxy(const char *url)
{	piProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

piProxy::piProxy(soap_mode iomode)
{	piProxy_init(iomode, iomode);
}

piProxy::piProxy(const char *url, soap_mode iomode)
{	piProxy_init(iomode, iomode);
	soap_endpoint = url;
}

piProxy::piProxy(soap_mode imode, soap_mode omode)
{	piProxy_init(imode, omode);
}

piProxy::~piProxy()
{ }

void piProxy::piProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"pi", "http://raspberrypi:8888", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void piProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void piProxy::reset()
{	destroy();
	soap_done(this);
	soap_init(this);
	piProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void piProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *piProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *piProxy::soap_fault()
{	return this->fault;
}

const char *piProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *piProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int piProxy::soap_close_socket()
{	return soap_closesock(this);
}

int piProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void piProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void piProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *piProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int piProxy::motor_con(const char *endpoint, const char *soap_action, int dir, int *result)
{	struct soap *soap = this;
	struct pi__motor_con soap_tmp_pi__motor_con;
	struct pi__motor_conResponse *soap_tmp_pi__motor_conResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://raspberrypi:8888 http://raspberrypi:8888";
	soap->encodingStyle = "";
	soap_tmp_pi__motor_con.dir = dir;
	soap_begin(soap);
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize_pi__motor_con(soap, &soap_tmp_pi__motor_con);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_pi__motor_con(soap, &soap_tmp_pi__motor_con, "pi:motor-con", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_pi__motor_con(soap, &soap_tmp_pi__motor_con, "pi:motor-con", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!result)
		return soap_closesock(soap);
	soap_default_int(soap, result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_pi__motor_conResponse = soap_get_pi__motor_conResponse(soap, NULL, "", "");
	if (!soap_tmp_pi__motor_conResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (result && soap_tmp_pi__motor_conResponse->result)
		*result = *soap_tmp_pi__motor_conResponse->result;
	return soap_closesock(soap);
}
/* End of client proxy code */
